---
import Layout from "@layouts/layout.astro";
import LoopsCta from "@components/loops-cta.astro";
import { formatDate } from "@util";
import type { CollectionEntry } from "astro:content";
import writersMetadataImport from "../data/writers.json" assert { type: "json" };

interface Props {
  post: CollectionEntry<"posts">;
}
interface Writer {
  name: string;
  description: string;
  profile: string | null;
  user_id: string;
  team: boolean;
}

const { post } = Astro.props;
const writersMetadata: Record<string, Writer> = writersMetadataImport;
---

<Layout title={post.data.properties.Name} headerTheme="dark">
  <div class="flex flex-col min-h-screen text-text">
    <div class="flex min-h-screen">
      <div class="flex flex-1">
        <article class="w-full mx-auto">
          <header
            class="w-full py-8 px-30 pt-10 bg-accent-header text-white pb-6 sm:pb-8 overflow-y-auto"
          >
            <h1
              class="text-4xl sm:text-5xl/[130%] font-lora mb-6 w-full max-w-4xl"
            >
              {post.data.properties.Name}
            </h1>
            <div class="flex flex-col xl:flex-row gap-10">
              <img
                src={post.data.properties.Image}
                alt={post.data.properties.ImageAlt}
                class="w-[50vw] max-w-full h-[45vh] max-h-full"
              />
              <div>
                <p class="text-lg font-atkinson sm:text-2xl mb-5">{post.data.properties.Description}</p>
                <p class="text-gray-400 font-lexend font-light">
                    <span class="font-normal">Written</span> by 
                      {post.data.properties.Authors.map((author, index) => {
                      const isLast = index === post.data.properties.Authors.length - 1;
                      if (!writersMetadata[author]) {
                        return <span>Unknown Author{!isLast && ", "}</span>;
                      }
                      const name = writersMetadata[author].name as string;
                        return (
                        <span>{name}{!isLast && ", "}</span>
                      );
                    })
                  }
                </p>
                <p class="text-gray-400 text-lexend mb-5">
                    {post.data.properties.Date
                    ? formatDate(post.data.properties.Date)
                    : "No date? :c"}
                </p>
                <div class="font-plex-sans">
                  {post.data.properties.Authors.map((author, index) => {
                    if (!writersMetadata[author]) {
                      return <span>We faced an error :(</span>;
                    }
                    return (
                      <div class="flex items-start gap-3 mt-3">
                        <span class="flex rounded-full overflow-hidden justify-center w-8 shrink-0">
                          <img src={writersMetadata[author].profile} alt={writersMetadata[author].name as string} class="object-cover w-8" />
                        </span>
                        <p class="text-gray-400">{writersMetadata[author].description}</p>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </header>
          <main class="flex-1 p-6 sm:p-8 overflow-y-auto max-w-7/10 mx-auto">
            <div class="xl:grid xl:grid-cols-[1fr_325px]">
              <div class="prose prose-invert max-w-none lg:prose-lg text-text font-atkinson mb-16 grow">
                <slot />
              </div>
              <LoopsCta />
            </div>
          </main>
        </article>
      </div>
    </div>
  </div>
</Layout>
